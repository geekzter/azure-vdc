# ARM_*, TF_VAR_* variables are shared so defined in Variable Groups defined in Library

trigger:
- master

jobs:
- job: 'Provision'
  displayName: 'Terraform'
  timeoutInMinutes: 120

# Set variables once
  variables:
    iaasResourceGroup: '$(TF_VAR_resource_prefix)-$(TF_VAR_resource_environment)-iaasapp-$(TF_VAR_resource_suffix)'
    paasResourceGroup: '$(TF_VAR_resource_prefix)-$(TF_VAR_resource_environment)-paasapp-$(TF_VAR_resource_suffix)'
    vdcResourceGroup: '$(TF_VAR_resource_prefix)-$(TF_VAR_resource_environment)-$(TF_VAR_resource_suffix)'
    scriptDirectory: 'Scripts'

  pool:
    name: $(pool)
    demands:
    - Agent.OS -equals Linux

  workspace:
    clean: all

  steps:
    - task: DownloadSecureFile@1
      displayName: 'Download SSL certificate'
      inputs:
        secureFile: '$(TF_VAR_vanity_certificate_path)'

    - task: DownloadSecureFile@1
      displayName: 'Download VPN root certificate'
      inputs:
        secureFile: '$(TF_VAR_vpn_root_cert_file)'

    - task: PowerShell@2
      name: TerraformTest
      displayName: 'Get preferred Terraform version number'
      inputs:
        filePath: '$(scriptDirectory)/get_tf_version.ps1'
        arguments: '-Version Preferred'
        pwsh: true

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use preferred Terraform version'
      inputs:
        terraformVersion: '$(TerraformTest.Version)'

    - task: AzurePowerShell@4
      name: Terraform
      displayName: 'Terraform init and apply'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(scriptDirectory)/tf_deploy.ps1'
        # To start from scratch, use these arguments:
      # ScriptArguments: '-init -clear -apply -force -workspace $(workspace) -trace $(trace) -parallelism $(parallelism)'
        # To continue where a previous (broken) build left of, use these arguments:
        ScriptArguments: '-init -apply -force -stickysuffix -workspace $(workspace) -trace $(trace) -parallelism $(parallelism)'
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true


# Provision again to test for issue's that only come up when resources already exist 
- job: 'Reprovision'
  dependsOn: 'Provision'
  displayName: 'Terraform (re-entrance test)'
  timeoutInMinutes: 120

# Set variables once
  variables:
    iaasResourceGroup: $[ dependencies.Provision.outputs['Terraform.iaas_app_resource_group'] ]
    vdcResourceGroup: $[ dependencies.Provision.outputs['Terraform.vdc_resource_group'] ]
    scriptDirectory: 'Scripts'
    terraformVersion: $[ dependencies.Provision.outputs['TerraformTest.Version'] ]

  pool:
    name: $(pool)
    demands:
    - Agent.OS -equals Linux

  steps:
    - task: DownloadSecureFile@1
      displayName: 'Download SSL certificate'
      inputs:
        secureFile: '$(TF_VAR_vanity_certificate_path)'

    - task: DownloadSecureFile@1
      displayName: 'Download VPN root certificate'
      inputs:
        secureFile: '$(TF_VAR_vpn_root_cert_file)'

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use preferred Terraform version'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - task: AzureResourceGroupDeployment@2
      displayName: 'Deallocate VM''s in App resource group'
      inputs:
        azureSubscription: '$(subscription)'
        action: StopWithDeallocate
        resourceGroupName: '$(iaasResourceGroup)'

    - task: AzureResourceGroupDeployment@2
      displayName: 'Stop VM''s in VDC resource group'
      inputs:
        azureSubscription: '$(subscription)'
        action: Stop
        resourceGroupName: '$(vdcResourceGroup)'

    - task: AzurePowerShell@4
      name: Terraform
      displayName: 'Terraform init and apply (re-entrance test)'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(scriptDirectory)/tf_deploy.ps1'
        ScriptArguments: '-init -apply -force -workspace $(workspace) -trace $(trace) -parallelism $(parallelism)'
        FailOnStandardError: true
        azurePowerShellVersion: 'LatestVersion'
        pwsh: true


# Deploy PaaS application 
- job: 'Deploy'
  dependsOn: 'Reprovision'
  displayName: 'Deploy & Test PaaS application'
  timeoutInMinutes: 120

# Set variables once
  variables:
    appServiceName: $[ dependencies.Reprovision.outputs['Terraform.paas_app_service_name'] ]
    appBuild: 'Release'
    paasAppUrl: $[ dependencies.Reprovision.outputs['Terraform.paas_app_url'] ]
    scriptDirectory: 'Scripts'
    terraformVersion: $[ dependencies.Reprovision.outputs['TerraformTest.Version'] ]

  pool:
    name: $(pool)
    demands:
    - Agent.OS -equals Linux

  steps:
    # Download PaaS Application Pipeline artifacts
    - task: DownloadPipelineArtifact@2
      inputs:
        buildType: 'specific'
        project: '0b7ba88e-1ad0-4782-839e-850e9a4b53c7'
        definition: '63'
        specificBuildWithTriggering: true
        buildVersionToDownload: 'latest'
        artifactName: 'aspnetcoresql'
        targetPath: '$(Pipeline.Workspace)/_asp.net-core-sql-ci'

    # Deploy PaaS Application
    - task: AzureWebApp@1
      displayName: 'Deploy ASP.NET Core App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: webApp
        appName: '$(appServiceName)'
        package: '$(Pipeline.Workspace)/_asp.net-core-sql-ci/aspnetcoresql/s/bin/$(appBuild)/netcoreapp2.2/publish.zip'

    # Test PaaS Application
    - task: PowerShell@2
      displayName: 'Test ASP.NET Core App'
      inputs:
        targetType: 'inline'
        script: |
          # Wait for the WAF to get ready
          Start-Sleep -Seconds 30
          
          # Request page
          Invoke-WebRequest $(paasAppUrl)
        failOnStderr: true
        pwsh: true

    - task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
      displayName: 'Use preferred Terraform version'
      inputs:
        terraformVersion: '$(terraformVersion)'

    - task: AzurePowerShell@4
      displayName: 'Terraform destroy'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptPath: '$(scriptDirectory)/tf_deploy.ps1'
        ScriptArguments: '-init -destroy -force -workspace $(workspace) -trace $(trace) -parallelism $(parallelism)'
        FailOnStandardError: true
        azurePowerShellVersion: LatestVersion
        pwsh: true
      condition: succeededOrFailed()

    - task: PowerShell@2
      displayName: 'Save used Terraform version number with tfenv'
      inputs:
        targetType: filePath
        filePath: '$(scriptDirectory)/get_tf_version.ps1'
        arguments: ' -Version installed | Out-File $(Build.SourcesDirectory)/Terraform/.terraform-version'
        pwsh: true

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Initialized Terraform workspace (with tested version of providers)'
      inputs:
        artifact: drop


# Clean up resources        
- job: 'CleanUp'
  dependsOn: 'Deploy'
  displayName: 'Clean Up'
  timeoutInMinutes: 120

  # Set variables once
  variables:
    iaasResourceGroup: $[ dependencies.Reprovision.outputs['Terraform.iaas_app_resource_group'] ]
    paasResourceGroup: $[ dependencies.Reprovision.outputs['Terraform.paas_app_resource_group'] ]
    vdcResourceGroup: $[ dependencies.Reprovision.outputs['Terraform.vdc_resource_group'] ]
    scriptDirectory: 'Scripts'

  pool:
    name: $(pool)
    demands:
    - Agent.OS -equals Linux

  workspace:
    clean: all

  steps:
    - task: AzureResourceGroupDeployment@2
      displayName: 'Tear down IaaS App resource group'
      inputs:
        azureSubscription: '$(subscription)'
        action: DeleteRG
        resourceGroupName: '$(iaasResourceGroup)'
      continueOnError: true
      condition: always()

    - task: AzureResourceGroupDeployment@2
      displayName: 'Tear down PaaS App resource group'
      inputs:
        azureSubscription: '$(subscription)'
        action: DeleteRG
        resourceGroupName: '$(paasResourceGroup)'
      continueOnError: true
      condition: always()

    - task: AzureResourceGroupDeployment@2
      displayName: 'Tear down VDC resource group'
      inputs:
        azureSubscription: '$(subscription)'
        action: DeleteRG
        resourceGroupName: '$(vdcResourceGroup)'
      continueOnError: true
      condition: always()

    - task: AzurePowerShell@4
      displayName: 'Clear Terraform workspace'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptPath: '$(scriptDirectory)/tf_clear_state.ps1'
        ScriptArguments: '-workspace $(workspace) -Destroy -Force'
        FailOnStandardError: true
        azurePowerShellVersion: LatestVersion
        pwsh: true
      condition: always()