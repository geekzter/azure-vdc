# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

# Set variables once
variables:
  scriptDirectory: 'Scripts'

pool:
  vmImage: 'ubuntu-latest'

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'

- task: DownloadSecureFile@1
  displayName: 'Download SSL certificate'
  inputs:
    secureFile: '$(TF_VAR_vanity_certificate_path)'

- task: DownloadSecureFile@1
  displayName: 'Download VPN root certificate'
  inputs:
    secureFile: '$(TF_VAR_vpn_root_cert_file)'

- task: PowerShell@2
  name: TerraformTest
  displayName: 'Get preferred Terraform version number'
  inputs:
    filePath: '$(scriptDirectory)/get_tf_version.ps1'
    arguments: '-Version Preferred'
    pwsh: true

- task: charleszipp.azure-pipelines-tasks-terraform.azure-pipelines-tasks-terraform-installer.TerraformInstaller@0
  displayName: 'Use preferred Terraform version'
  inputs:
    terraformVersion: '$(TerraformTest.Version)'

# - task: AzurePowerShell@4
#   displayName: 'Terraform init and apply'
#   inputs:
#     azureSubscription: 'Microsoft Azure Internal Consumption Eric van Wijk(84c1a2c7-585a-4753-ad28-97f69618cf12)'
#     ScriptType: 'FilePath'
#     ScriptPath: './tf_deploy.ps1'
#     ScriptArguments: '-init -force -workspace $(workspace) -trace $(trace) -parallelism $(parallelism)'
#     FailOnStandardError: true
#     azurePowerShellVersion: 'LatestVersion'
#     pwsh: true
#     workingDirectory: $(scriptDirectory)
