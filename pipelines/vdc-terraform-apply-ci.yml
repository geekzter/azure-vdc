# This pipeline perfors a full CI test of the VDC:
#  - Provision infrastructure
#  - Deploy application
#  - Test application
#  - Destroy infrastructure

parameters:
- name: debug
  displayName: Debug
  type: boolean
  default: false
- name: inherit
  displayName: Inherit state
  type: boolean
  default: false
- name: provision
  displayName: Provision infrastructure
  type: boolean
  default: true
- name: deploy
  displayName: Deploy PaaS application
  type: boolean
  default: true
- name: destroy
  displayName: Destroy infrastructure
  type: boolean
  default: true

trigger:
  batch: true
  branches:
    include:
    - master
  paths:
    include:
    - 'scripts/*' 
    - 'terraform/*' 
    exclude:
    - '*.md'
    - '*.png'  
    - '*.svg'  
    - '*.vsdx'  
    - 'apps/*'
    - 'kusto/*'
    - 'pipelines/*'

pr:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - '*.md'  
    - '*.png'  
    - '*.svg'  
    - '*.vsdx'  

schedules:
  - cron: '0 3 * * *'
    displayName: 'Daily early morning build (UTC)'
    # Run if there are no changes
    always: 'true'
    branches:
      include:
      - master

# Global variables shared by all jobs
variables:
  # Variable Groups are referenced, but defined elsewhere (Library)

  # This pipeline assumes TF_VAR_* variables are defined in Variable Groups defined in Library
  # The Terraform VDC project requires quite a number of settings, see:
  # https://github.com/geekzter/azure-vdc/blob/master/terraform/variables.tf
  # https://github.com/geekzter/azure-vdc/blob/master/terraform/config.auto.tfvars.sample
  # https://github.com/geekzter/azure-vdc/blob/master/terraform/ci.tfvars
  # i.e. settings in these files should be captured in (a) variable group(s)
  # These can be provided as TF_VAR_<input-variable> environment variables:
  # https://www.terraform.io/docs/configuration/variables.html#environment-variables
  # 'vdc' contains global settings common to all VDC pipelines
- group: 'vdc'
  # 'vdc-ci' contains build (non-release) settings
- group: 'vdc-ci'
  # 'vdc-vanity-domain' contains certificate, domain information
- group: 'vdc-vanity-domain'

- name: 'ARM_PROVIDER_STRICT'
  value: 'true'
- name: 'TF_IN_AUTOMATION'
  value: 'true'
- name: 'TF_INPUT'
  value: 0
- name: 'TF_WORKSPACE'
  value: 'ci'

# Inline variables shared across jobs
  # This references this pipeline:
  # https://github.com/geekzter/dotnetcore-sqldb-tutorial/blob/master/azure-pipelines.yml
- name: 'appPipeline'
  value: '0b7ba88e-1ad0-4782-839e-850e9a4b53c7'
- name: 'jobTimeOutMinutes'
  value: 180
- name: 'scriptDirectory'
  value: '$(Build.SourcesDirectory)/scripts'
- name: 'system.debug'
  value: ${{ parameters.debug }}
- name: 'iaasResourceGroup'
  value: '$(TF_VAR_resource_prefix)-$(TF_VAR_resource_environment)-iaasapp-$(TF_VAR_resource_suffix)'
- name: 'paasResourceGroup'
  value: '$(TF_VAR_resource_prefix)-$(TF_VAR_resource_environment)-paasapp-$(TF_VAR_resource_suffix)'
- name: 'vdcResourceGroup' 
  value: '$(TF_VAR_resource_prefix)-$(TF_VAR_resource_environment)-$(TF_VAR_resource_suffix)'

jobs:
- job: 'Prepare'
  displayName: 'Prepare'
  condition: succeeded()
  timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

  pool:
    vmImage: 'ubuntu-latest'

  workspace:
    clean: all

  steps:
    - task: AzureCLI@2
      displayName: 'Gather Terraform settings'
      name: terraformConfig
      inputs:
        azureSubscription: '$(subscriptionConnection)'
        scriptType: pscore
        scriptLocation: inlineScript
        inlineScript: |
          # List environment variables (debug)
          if ((${env:system.debug} -eq "true") -or ($env:system_debug -eq "true") -or ($env:SYSTEM_DEBUG -eq "true")) {
            Get-ChildItem -Path Env:ARM_* | Sort-Object -Property Name
          }

          # This will write version info as output variable
          $(scriptDirectory)/get_tf_version.ps1 -version preferred
        addSpnToEnvironment: true
        useGlobalConfig: true
        failOnStandardError: true
        workingDirectory: '$(scriptDirectory)'

- ${{ if or(eq(parameters.provision, true),eq(parameters.deploy, true)) }}:
  # Provision on self-hosted agent
  - job: 'Provision'
    dependsOn: Prepare
    displayName: 'Provision Infrastructure with Terraform'
    condition: succeeded()
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      # Use earlier prepared Terraform config
      terraformClientId: $[ dependencies.Prepare.outputs['terraformConfig.clientId'] ]
      terraformClientSecret: $[ dependencies.Prepare.outputs['terraformConfig.clientSecret'] ]
      terraformSubscriptionId: $[ dependencies.Prepare.outputs['terraformConfig.subscriptionId'] ]
      terraformTenantId: $[ dependencies.Prepare.outputs['terraformConfig.tenantId'] ]
      terraformVersion: $[ dependencies.Prepare.outputs['terraformConfig.version'] ]

    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
      - task: DownloadSecureFile@1
        displayName: 'Download SSL certificate'
        inputs:
          secureFile: '$(TF_VAR_vanity_certificate_path)'

      - task: DownloadSecureFile@1
        displayName: 'Download VPN root certificate'
        inputs:
          secureFile: '$(TF_VAR_vpn_root_cert_file)'

      # We could do this with tfenv, however there is no task for that
      - task: TerraformInstaller@0
        displayName: 'Use preferred Terraform version'
        inputs:
          terraformVersion: '$(terraformVersion)'

      - task: AzureCLI@2
        # Name is required so Terraform output exported by tf_deploy.ps1 can be referenced by subsequent Pipeline steps
        name: terraform
        displayName: 'Terraform init & apply'
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          # ARM_* environment variables are required by Terraform azurerm provider and backend
          # https://www.terraform.io/docs/providers/azurerm/index.html
          # https://www.terraform.io/docs/backends/types/azurerm.html
          # Use Pipeline Service Principal and Service Connection to set up these variables
          inlineScript: |
            $(scriptDirectory)/tf_deploy.ps1 -init -clear:$${{ not(parameters.inherit) }} -stickysuffix:$${{ parameters.inherit }} -apply -force -trace $(trace) -parallelism $(parallelism)
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
        env:
          TF_VAR_default_create_timeout: '$(jobTimeOutMinutes)m'

- ${{ if eq(parameters.provision, true) }}:
  # Provision again to test for issue's that only come up when resources already exist 
  - job: 'Reprovision'
    dependsOn:
    - Prepare
    - Provision
    displayName: 'Provision Infrastructure with Terraform (re-entrance test)'
    condition: succeeded()
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      iaasResourceGroup: $[ dependencies.Provision.outputs['terraform.iaas_app_resource_group'] ]
      vdcResourceGroup: $[ dependencies.Provision.outputs['terraform.vdc_resource_group'] ]
      # Use earlier prepared Terraform config
      terraformClientId: $[ dependencies.Prepare.outputs['terraformConfig.clientId'] ]
      terraformClientSecret: $[ dependencies.Prepare.outputs['terraformConfig.clientSecret'] ]
      terraformSubscriptionId: $[ dependencies.Prepare.outputs['terraformConfig.subscriptionId'] ]
      terraformTenantId: $[ dependencies.Prepare.outputs['terraformConfig.tenantId'] ]
      terraformVersion: $[ dependencies.Prepare.outputs['terraformConfig.version'] ]

    pool:
      vmImage: 'ubuntu-latest'

    steps:
      # Assume workspace is empty and re-download secure files
      - task: DownloadSecureFile@1
        displayName: 'Download SSL certificate'
        inputs:
          secureFile: '$(TF_VAR_vanity_certificate_path)'

      - task: DownloadSecureFile@1
        displayName: 'Download VPN root certificate'
        inputs:
          secureFile: '$(TF_VAR_vpn_root_cert_file)'

      - task: TerraformInstaller@0
        displayName: 'Use preferred Terraform version'
        inputs:
          terraformVersion: '$(terraformVersion)'

      # Deallocate/Stop MV's to force tf_deploy.ps1 to test for stopped VM's
      # Stopped VM's do not allow extensions to be installed
      - task: AzureResourceGroupDeployment@2
        displayName: 'Deallocate VM''s in App resource group'
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          # TODO
          #action: StopWithDeallocate
          action: Stop
          resourceGroupName: '$(iaasResourceGroup)'

      - task: AzureResourceGroupDeployment@2
        displayName: 'Stop VM''s in VDC resource group'
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          action: Stop
          resourceGroupName: '$(vdcResourceGroup)'

      # Test for failures that only occur when resources already exist
      - task: AzureCLI@2
        name: terraform
        displayName: 'Terraform init and apply (re-entrance test)'
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          # ARM_* environment variables are required by Terraform azurerm provider and backend
          # https://www.terraform.io/docs/providers/azurerm/index.html
          # https://www.terraform.io/docs/backends/types/azurerm.html
          # Use Pipeline Service Principal and Service Connection to set up these variables
          inlineScript: |
            $(scriptDirectory)/tf_deploy.ps1 -init -apply -force -stickysuffix -trace $(trace) -parallelism $(parallelism)
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
        env:
          TF_VAR_default_create_timeout: '$(jobTimeOutMinutes)m'

- ${{ if eq(parameters.deploy, true) }}:
  # Deploy PaaS application 
  - job: 'Deploy'
    dependsOn:
      - Prepare
      - Provision
      - ${{ if eq(parameters.provision, true) }}:
        - Reprovision
    displayName: 'Deploy & Test PaaS Application'
    condition: succeeded()
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      appArtifactDirectory: '$(Pipeline.Workspace)/aspnetcoresql'
      appBuild: 'Release'
      appPackage: '$(appArtifactDirectory)/s/bin/$(appBuild)/netcoreapp2.2/publish.zip'
      # Get application configuration from Terraform output
      appServiceName: $[ dependencies.Provision.outputs['terraform.paas_app_service_name'] ]
      appUrl: $[ dependencies.Provision.outputs['terraform.paas_app_url'] ]
      appMSIName: $[ dependencies.Provision.outputs['terraform.paas_app_service_msi_name'] ]
      appMSIClientID: $[ dependencies.Provision.outputs['terraform.paas_app_service_msi_client_id'] ]
      appSQLAdmin: 'vdcadmin'
      appSQLDatabase: $[ dependencies.Provision.outputs['terraform.paas_app_sql_database'] ]
      appSQLFirewallImportRule: 'AllowAllWindowsAzureIPs'
      appSQLServer: $[ dependencies.Provision.outputs['terraform.paas_app_sql_server'] ]
      appSQLServerFQDN: $[ dependencies.Provision.outputs['terraform.paas_app_sql_server_fqdn'] ]
      paasResourceGroup: $[ dependencies.Provision.outputs['terraform.paas_app_resource_group'] ]
      storageUrl: 'https://ewimages.blob.core.windows.net/databasetemplates/vdcdevpaasappsqldb-2020-1-18-15-13.bacpac'
      storageSAS: '?st=2020-03-20T13%3A57%3A32Z&se=2023-04-12T13%3A57%3A00Z&sp=r&sv=2018-03-28&sr=c&sig=qGpAjJlpDQsq2SB6ev27VbwOtgCwh2qu2l3G8kYX4rU%3D'
      # Use earlier prepared Terraform config
      terraformClientId: $[ dependencies.Prepare.outputs['terraformConfig.clientId'] ]
      terraformClientSecret: $[ dependencies.Prepare.outputs['terraformConfig.clientSecret'] ]
      terraformSubscriptionId: $[ dependencies.Prepare.outputs['terraformConfig.subscriptionId'] ]
      terraformTenantId: $[ dependencies.Prepare.outputs['terraformConfig.tenantId'] ]

    pool:
      # SqlAzureDacpacDeployment@1 only runs on Windows
      vmImage: 'ubuntu-latest'

    steps:
      - pwsh: |
          Invoke-Webrequest -Uri "$(storageUrl)$(storageSAS)" -OutFile $(System.DefaultWorkingDirectory)/database.bacpac
        displayName: 'Download BACPAC'
        enabled: false

      - task: SqlAzureDacpacDeployment@1 
      # https://docs.microsoft.com/en-us/azure/devops/pipelines/tasks/deploy/sql-azure-dacpac-deployment
        displayName: 'Import database'
        enabled: false
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          authenticationType: aadAuthenticationIntegrated
          serverName: $(appSQLServerFQDN)
          databaseName: $(appSQLDatabase)
          deploymentAction: Import
          bacpacFile: '$(System.DefaultWorkingDirectory)/database.bacpac'
          ipDetectionMethod: 'AutoDetect'
          deleteFirewallRule: true

      - task: AzureCLI@2
        displayName: 'Import database and set permissions (with script)'
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          inlineScript: |
            ./deploy_paas_app.ps1 -Database `
                                  -AppResourceGroup $(paasResourceGroup) `
                                  -AppAppServiceIdentity $(appMSIName) `
                                  -AppAppServiceClientID $(appMSIClientID) `
                                  -SqlServer $(appSQLServer) `
                                  -SqlServerFQDN $(appSQLServerFQDN) `
                                  -SqlDatabase $(appSQLDatabase)
          useGlobalConfig: true
          workingDirectory: '$(scriptDirectory)'
          failOnStandardError: true
        env:
          # Use prepared Terraform environment variables
          ARM_SUBSCRIPTION_ID: '$(terraformSubscriptionId)'

      # Download PaaS Application Pipeline artifacts
      # This consumes artifacts published by this pipeline:
      # https://github.com/geekzter/dotnetcore-sqldb-tutorial/blob/master/azure-pipelines.yml
      - task: DownloadPipelineArtifact@2
        displayName: 'Download ASP.NET Core App Artifacts'
        enabled: true
        inputs:
          buildType: 'specific'
          project: '$(appPipeline)'
          definition: '63'
          specificBuildWithTriggering: true
          buildVersionToDownload: 'latest'
          artifactName: 'aspnetcoresql'
          targetPath: '$(appArtifactDirectory)'

      # Deploy PaaS Application
      - task: AzureWebApp@1
        displayName: 'Deploy ASP.NET Core App'
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          appType: webApp
          appName: '$(appServiceName)'
          package: '$(appPackage)'

      # Test PaaS Application
      - task: PowerShell@2
        displayName: 'Test ASP.NET Core App'
        inputs:
          targetType: 'inline'
          script: |
            # Wait for the WAF to get ready
            Start-Sleep -Seconds 30
            
            # Request page
            Invoke-WebRequest -Uri $(appUrl) -MaximumRetryCount 9
          failOnStderr: true
          pwsh: true

- ${{ if eq(parameters.destroy, true) }}:
  # Destroy infrastructure
  - job: 'Destroy'
    dependsOn:
      - Prepare
      - ${{ if or(eq(parameters.provision, true),eq(parameters.deploy, true)) }}:
        - Provision
      - ${{ if eq(parameters.deploy, true) }}:
        - Deploy
    displayName: 'Destroy Infrastructure with Terraform'
    condition: succeededOrFailed()
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      # Use earlier prepared Terraform config
      terraformClientId: $[ dependencies.Prepare.outputs['terraformConfig.clientId'] ]
      terraformClientSecret: $[ dependencies.Prepare.outputs['terraformConfig.clientSecret'] ]
      terraformSubscriptionId: $[ dependencies.Prepare.outputs['terraformConfig.subscriptionId'] ]
      terraformTenantId: $[ dependencies.Prepare.outputs['terraformConfig.tenantId'] ]
      terraformVersion: $[ dependencies.Prepare.outputs['terraformConfig.version'] ]

    pool:
      vmImage: 'ubuntu-latest'

    steps:
      # Assume workspace is empty and re-download secure files
      - task: DownloadSecureFile@1
        displayName: 'Download SSL certificate'
        inputs:
          secureFile: '$(TF_VAR_vanity_certificate_path)'

      - task: DownloadSecureFile@1
        displayName: 'Download VPN root certificate'
        inputs:
          secureFile: '$(TF_VAR_vpn_root_cert_file)'
          
      - task: TerraformInstaller@0
        displayName: 'Use preferred Terraform version'
        inputs:
          terraformVersion: '$(terraformVersion)'

      - task: AzureCLI@2
        name: terraformConfig
        displayName: 'Terraform destroy'
        condition: succeededOrFailed()
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          # ARM_* environment variables are required by Terraform azurerm provider and backend
          # https://www.terraform.io/docs/providers/azurerm/index.html
          # https://www.terraform.io/docs/backends/types/azurerm.html
          # Use Pipeline Service Principal and Service Connection to set up these variables
          inlineScript: |
            $(scriptDirectory)/tf_deploy.ps1 -init -destroy -force -trace $(trace) -parallelism $(parallelism)
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
        env:
          TF_VAR_default_create_timeout: '$(jobTimeOutMinutes)m'

      # When using tfenv, this will make sure the same Terraform version will be used as we tested in this pipeline
      - task: PowerShell@2
        displayName: 'Save used Terraform version number with tfenv'
        inputs:
          targetType: filePath
          filePath: '$(scriptDirectory)/get_tf_version.ps1'
          arguments: ' -version installed | Out-File $(Build.SourcesDirectory)/terraform/.terraform-version'
          pwsh: true
          workingDirectory: '$(scriptDirectory)'

      # Publish Initialized Terraform workspace
      # This workspace can be downloaded as artifacts in a release pipeline. 
      # That release pipeline will than run with tested versions of Terraform and Terraform providers, without the need for 'terraform init'
      - task: PublishPipelineArtifact@1
        displayName: 'Publish Initialized Terraform workspace'
        inputs:
          artifact: drop

- ${{ if eq(parameters.destroy, true) }}:
  # Clean up resources, in the event 'terraform destroy' fails   
  - job: 'CleanUp'
    dependsOn:
      - Prepare
      - Destroy
      - ${{ if or(eq(parameters.provision, true),eq(parameters.deploy, true)) }}:
        - Provision
        - Reprovision
    displayName: 'Clean Up'
    # Run if Terraform provision or destroy failed, or the whole pipeline was canceled
    condition: or(ne(dependencies.Provision.result, 'Succeeded'), ne(dependencies.Reprovision.result, 'Succeeded'), ne(dependencies.Destroy.result, 'Succeeded'), canceled())
    timeoutInMinutes: $[ variables['jobTimeOutMinutes'] ]

    variables:
      # Use earlier prepared Terraform config
      terraformClientId: $[ dependencies.Prepare.outputs['terraformConfig.clientId'] ]
      terraformClientSecret: $[ dependencies.Prepare.outputs['terraformConfig.clientSecret'] ]
      terraformSubscriptionId: $[ dependencies.Prepare.outputs['terraformConfig.subscriptionId'] ]
      terraformTenantId: $[ dependencies.Prepare.outputs['terraformConfig.tenantId'] ]
      terraformVersion: $[ dependencies.Prepare.outputs['terraformConfig.version'] ]

    pool:
      vmImage: 'ubuntu-latest'

    workspace:
      clean: all

    steps:
      - task: AzureResourceGroupDeployment@2
        displayName: 'Tear down IaaS App resource group'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          action: DeleteRG
          resourceGroupName: '$(iaasResourceGroup)'
        continueOnError: true
        condition: succeededOrFailed()
        enabled: false # rely on erase.ps1

      - task: AzureResourceGroupDeployment@2
        displayName: 'Tear down PaaS App resource group'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          action: DeleteRG
          resourceGroupName: '$(paasResourceGroup)'
        continueOnError: true
        condition: succeededOrFailed()
        enabled: false # rely on erase.ps1

      - task: AzureResourceGroupDeployment@2
        displayName: 'Tear down VDC resource group'
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          action: DeleteRG
          resourceGroupName: '$(vdcResourceGroup)'
        continueOnError: true
        condition: succeededOrFailed()
        enabled: false # rely on erase.ps1

      - task: TerraformInstaller@0
        displayName: 'Use preferred Terraform version'
        inputs:
          terraformVersion: '$(terraformVersion)'
        condition: always()

      # Clear Terraform workspace, just in case
      # As a last resort, this also destroys any resources that may not have deleted before
      - task: AzureCLI@2
        name: terraform
        displayName: 'Clear Terraform workspace'
        condition: succeededOrFailed()
        enabled: true
        inputs:
          azureSubscription: '$(subscriptionConnection)'
          scriptType: pscore
          scriptLocation: inlineScript
          # ARM_* environment variables are required by Terraform azurerm provider and backend
          # https://www.terraform.io/docs/providers/azurerm/index.html
          # https://www.terraform.io/docs/backends/types/azurerm.html
          # Use Pipeline Service Principal and Service Connection to set up these variables
          inlineScript: |
            $(scriptDirectory)/tf_deploy.ps1 -init -trace $(trace)
            $(scriptDirectory)/erase.ps1 -destroy -force -wait -timeoutminutes $(jobTimeOutMinutes)
          addSpnToEnvironment: true
          useGlobalConfig: true
          failOnStandardError: true
          workingDirectory: '$(scriptDirectory)'
          